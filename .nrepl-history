          _ (u/on-the-minute-second c [4 9 14 19 24 29 34 39 44 49 54 59] [54])]
         (while true
                (println "hey-----------------------------------------" (<! c))
                (testing trade-green?)
                )))
(defn testing [trade-green?]
        (go
               (let [shorten (fn [stng length] (if (>= length (count stng)) stng (subs stng 0 length)))
                     c1 (chan)
                     c2 (chan)
                     order-chan (chan)
                     _ (go (println (<! order-chan)))
                     _ (ds/acc-info c1)
                     _ (ds/oanda-history-cas c2 "EUR_USD" "1" "M5")
                     {{:keys [orders balance trades positions]} :account :as account} (<! c1)
                     {trade-price :price} (when (not (empty? trades)) (first trades))
                     {stop-price :price} (when (not (empty? trades)) (first orders))
                     stop-price-num (when (not (empty? trades)) (read-string stop-price))
                     trade-price-num (when (not (empty? trades)) (read-string trade-price))
                     {:keys [tradeID]} (when (not (empty? orders)) (first orders))
                     {:keys [open high low close] :as current-candle} (first (<! c2))
                     balance-lp (shorten (str balance) 4)
                     balance-lp-two (shorten (str (* 2 (read-string balance))) 4)
                     balance-lp "10000"
                     balance-lp-two "20000"
                     low-lp (shorten (str (- low 0.0001) ) 7)
                     high-lp (shorten (str (+ high 0.0001)) 7)]
                    (when (empty? trades) (reset! trade-green? (if (< 0 (- close open)) true false)))
                    (cond
                      (empty? trades) (cond
                                        (u/green? current-candle)
                                        (do
                                          (println "empty trade green current " low-lp)
                                          (ds/oanda-open-order-cas order-chan "EUR_USD" balance-lp low-lp))
                                        :red (do
                                               (println "empty trade red current " high-lp)
                                               (ds/oanda-open-order-cas order-chan "EUR_USD" (str "-" balance-lp) high-lp)))
                      (u/green? current-candle) (cond
                                                  @trade-green? (do
                                                                 (println "current candle green, green trade " low-lp)
                                                                 (ds/oanda-patch-order-cas order-chan tradeID low-lp))
                                                  :trade-red (do
                                                               (println "current candle green, red trade " balance-lp-two)
                                                               (ds/oanda-open-order-cas order-chan "EUR_USD" (str balance-lp-two) low-lp)
                                                               (reset! trade-green? (if (< 0 (- close open)) true false))
                                                               ))
                      :current-candle-red (cond
                                            @trade-green? (do
                                                           (println "current candle red, green trade " balance-lp-two)
                                                           (ds/oanda-open-order-cas order-chan "EUR_USD" (str "-" balance-lp-two) high-lp)
                                                           (reset! trade-green? (if (< 0 (- close open)) true false))
                                                           )
                                            :trade-red (do
                                                         (println "current candle red, red trade " high-lp)
                                                         (ds/oanda-patch-order-cas order-chan tradeID high-lp))))))
        )
(go
    (let [c (chan)
          trade-green? (atom false)
          _ (u/on-the-minute-second c [4 9 14 19 24 29 34 39 44 49 54 59] [54])]
         (while true
                (println "hey-----------------------------------------" (<! c))
                (testing trade-green?)
                )))
(defn testing [trade-green?]
        (go
               (let [shorten (fn [stng length] (if (>= length (count stng)) stng (subs stng 0 length)))
                     c1 (chan)
                     c2 (chan)
                     order-chan (chan)
                     _ (go (println (<! order-chan)))
                     _ (ds/acc-info c1)
                     _ (ds/oanda-history-cas c2 "EUR_USD" "1" "M5")
                     {{:keys [orders balance trades positions]} :account :as account} (<! c1)
                     {trade-price :price} (when (not (empty? trades)) (first trades))
                     {stop-price :price} (when (not (empty? trades)) (first orders))
                     stop-price-num (when (not (empty? trades)) (read-string stop-price))
                     trade-price-num (when (not (empty? trades)) (read-string trade-price))
                     {:keys [tradeID]} (when (not (empty? orders)) (first orders))
                     {:keys [open high low close] :as current-candle} (first (<! c2))
                     balance-lp (shorten (str balance) 4)
                     balance-lp-two (shorten (str (* 2 (read-string balance))) 4)
                     balance-lp "10000"
                     balance-lp-two "20000"
                     low-lp (shorten (str (- low 0.0001) ) 7)
                     high-lp (shorten (str (+ high 0.0001)) 7)]
                    (when (empty? trades) (reset! trade-green? (if (< 0 (- close open)) true false)))
                    (cond
                      (empty? trades) (cond
                                        (u/green? current-candle)
                                        (do
                                          (println "empty trade green current " low-lp)
                                          (ds/oanda-open-order-cas order-chan "EUR_USD" balance-lp low-lp))
                                        :red (do
                                               (println "empty trade red current " high-lp)
                                               (ds/oanda-open-order-cas order-chan "EUR_USD" (str "-" balance-lp) high-lp)))
                      (u/green? current-candle) (cond
                                                  @trade-green? (do
                                                                 (println "current candle green, green trade " low-lp)
                                                                 (ds/oanda-patch-order-cas order-chan tradeID low-lp))
                                                  :trade-red (do
                                                               (println "current candle green, red trade " balance-lp-two)
                                                               (ds/oanda-open-order-cas order-chan "EUR_USD" (str balance-lp-two) low-lp)
                                                               (reset! trade-green? (if (< 0 (- close open)) true false))
                                                               ))
                      :current-candle-red (cond
                                            @trade-green? (do
                                                           (println "current candle red, green trade " balance-lp-two)
                                                           (ds/oanda-open-order-cas order-chan "EUR_USD" (str "-" balance-lp-two) high-lp)
                                                           (reset! trade-green? (if (< 0 (- close open)) true false))
                                                           )
                                            :trade-red (do
                                                         (println "current candle red, red trade " high-lp)
                                                         (ds/oanda-patch-order-cas order-chan tradeID high-lp))))))
        )
(go
    (let [c (chan)
          trade-green? (atom false)
          _ (u/on-the-minute-second c [4 9 14 19 24 29 34 39 44 49 54 59] [54])]
         (while true
                (println "hey-----------------------------------------" (<! c))
                (testing trade-green?)
                )))
(let [c (chan)]
       (ds/oanda-history-cas c "EUR_USD" "1" "M5")
       (<!! c))
price-hist
(def price-hist (atom {:current-order {}
                         :open-date nil
                         :stop-loss nil
                         :buy-or-sell nil
                         :order-price nil
                         :account 1000
                         :history []}))
@price-hist
(add-watch price-hist :clear-old
             (fn [key atom old-state new-state]
                 (prn "-- Atom Changed --")
                 (prn "key" key)
                 (prn "atom" atom)
                 (prn "old-state" old-state)
                 (prn "new-state" new-state)))
(ds/oanda-historical "EUR_USD" "1" "M5")
(first (ds/oanda-historical "EUR_USD" "1" "M5"))
(swap! price-hist smp/simple-strat-perc-live (first (ds/oanda-historical "EUR_USD" "1" "M5")))
  (load-file "src/core/simple.clj")
  (swap! price-hist smp/simple-strat-perc-live (first (ds/oanda-historical "EUR_USD" "1" "M5")))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple))
(ds/oanda-historical "EUR_USD" "1" "M5")
(ds/oanda-historical "EUR_USD" "10" "M5")
  (docs ds/oanda-historical)
  (doc ds/oanda-historical)
  (s/valid? (s/coll-of ::u/standard-candle) (ds/oanda-historical "EUR_USD" "10" "M5")) 
  (smp/simple-strat (ds/oanda-historical "EUR_USD" "10" "M5"))
  (load-file "src/core/simple.clj")
  (load-file "src/core/utils.clj")
  (smp/simple-strat (ds/oanda-historical "EUR_USD" "10" "M5"))
  (smp/simple-strat-profit-calc  (smp/simple-strat (ds/oanda-historical "EUR_USD" "10" "M5")))
  (smp/simple-strat-profit-calc  (smp/simple-strat (ds/oanda-historical "EUR_USD" "5000" "M5")))
  (smp/simple-strat-profit-calc  (smp/simple-strat (ds/oanda-historical "EUR_USD" "5000" "1H")))
  (smp/simple-strat-profit-calc  (smp/simple-strat (ds/oanda-historical "EUR_USD" "5000" "M5")))
  (smp/simple-strat-profit-calc  (smp/simple-strat (ds/oanda-historical "EUR_USD" "1000" "1H"))) 
  (smp/simple-strat-profit-calc  (smp/simple-strat (ds/oanda-historical "EUR_USD" "1000" "H1"))) 
(ds/oanda-historical "EUR_USD" "10" "H1")
(vs/plot-standard-candles (ds/oanda-historical "EUR_USD" "1" "M5") )
(ds/oanda-historical "EUR_USD" "1" "M5")
  (vs/plot-standard-candles (ds/oanda-historical "EUR_USD" "10" "M5") )
(vs/plot-standard-candles 
    [
   {:unixtimestamp 1487304000000, :open 1.06741, :low 1.06722, :high 1.0674700000000001, :close 1.067455}
   {:unixtimestamp 1487307600000, :open 1.06748, :low 1.066925, :high 1.06756, :close 1.067145}
   {:unixtimestamp 1487311200000, :open 1.06712, :low 1.06654, :high 1.067345, :close 1.066675}
   {:unixtimestamp 1487314800000, :open 1.066655, :low 1.065465, :high 1.0673300000000001, :close 1.0655450000000002}
   {:unixtimestamp 1487318400000, :open 1.065525, :low 1.0640749999999999, :high 1.06588, :close 1.064845}
   {:unixtimestamp 1487322000000, :open 1.064825, :low 1.0637400000000001, :high 1.06535, :close 1.0643449999999999}
   {:unixtimestamp 1487325600000, :open 1.0643150000000001, :low 1.064, :high 1.065245, :close 1.064505}
   {:unixtimestamp 1487329200000, :open 1.064485, :low 1.06418, :high 1.06501, :close 1.06467}
   {:unixtimestamp 1487332800000, :open 1.064645, :low 1.064495, :high 1.06579, :close 1.064695}
   {:unixtimestamp 1487336400000, :open 1.064715, :low 1.06448, :high 1.0657999999999999, :close 1.065355}
   ]
    )
(smp/simple-strat [{:unixtimestamp 1487304000000, :open 1.00, :low 0.9, :high 1.2, :close 1.1}
                     {:unixtimestamp 1487307600000, :open 1.06748, :low 1.066925, :high 1.06756, :close 1.067145}])
(-> 
  (smp/simple-strat [{:unixtimestamp 1487304000000, :open 1.00, :low 0.9, :high 1.2, :close 1.1}
                     {:unixtimestamp 1487307600000, :open 1.06748, :low 1.066925, :high 1.06756, :close 1.067145}])  
    (smp/simple-strat-profit-calc)
    )
(-> 
  (smp/simple-strat [{:unixtimestamp 1487304000000, :open 1.0, :low 0.9, :high 1.2, :close 1.1}
                     {:unixtimestamp 1487307600000, :open 1.1, :low 1.0, :high 1.3, :close 1.2}])  
    (smp/simple-strat-profit-calc)
    )
(-> 
  (smp/simple-strat [{:unixtimestamp 1487304000000, :open 1.00000, :low 0.90000, :high 1.20000, :close 1.10000}
                     {:unixtimestamp 1487307600000, :open 1.10000, :low 1.00000, :high 1.30000, :close 1.20000}])  
    (smp/simple-strat-profit-calc)
    )
(defn round2
    "Round a double to the given precision (number of significant digits)"
    [precision d]
    (let [factor (Math/pow 10 precision)]
      (/ (Math/round (* d factor)) factor)))
(round2 0.0003)
(round2 0.0003 2)
(round2  2 0.0003)
(round2 2 0.12345)
(-> 
    (smp/simple-strat [{:unixtimestamp 1487304000000, :open 1.00000, :low 0.90000, :high 1.20000, :close 1.10000}
                       {:unixtimestamp 1487307600000, :open 1.10000, :low 1.00000, :high 1.30000, :close 1.20000}])  
    (smp/simple-strat-profit-calc)
    )
(->> 
    (smp/simple-strat [{:unixtimestamp 1487304000000, :open 1.00000, :low 0.90000, :high 1.20000, :close 1.10000}
                       {:unixtimestamp 1487307600000, :open 1.10000, :low 1.00000, :high 1.30000, :close 1.20000}])  
    (smp/simple-strat-profit-calc)
    (round2 1)
    )
u/green-stop-out
  (vs/plot-standard-candles  u/green-stop-out)
  (vs/plot-standard-candles u/green-stop-out)
(vs/plot-standard-candles 
    [
   {:unixtimestamp 1487304000000, :open 1.06741, :low 1.06722, :high 1.0674700000000001, :close 1.067455}
   {:unixtimestamp 1487307600000, :open 1.06748, :low 1.066925, :high 1.06756, :close 1.067145}
   {:unixtimestamp 1487311200000, :open 1.06712, :low 1.06654, :high 1.067345, :close 1.066675}
   {:unixtimestamp 1487314800000, :open 1.066655, :low 1.065465, :high 1.0673300000000001, :close 1.0655450000000002}
   {:unixtimestamp 1487318400000, :open 1.065525, :low 1.0640749999999999, :high 1.06588, :close 1.064845}
   {:unixtimestamp 1487322000000, :open 1.064825, :low 1.0637400000000001, :high 1.06535, :close 1.0643449999999999}
   {:unixtimestamp 1487325600000, :open 1.0643150000000001, :low 1.064, :high 1.065245, :close 1.064505}
   {:unixtimestamp 1487329200000, :open 1.064485, :low 1.06418, :high 1.06501, :close 1.06467}
   {:unixtimestamp 1487332800000, :open 1.064645, :low 1.064495, :high 1.06579, :close 1.064695}
   {:unixtimestamp 1487336400000, :open 1.064715, :low 1.06448, :high 1.0657999999999999, :close 1.065355}
  ]
    )
l
(vs/plot-standard-candles 
    [
   {:unixtimestamp 1487304000000, :open 1.06741, :low 1.06722, :high 1.0674700000000001, :close 1.067455}
   {:unixtimestamp 1487307600000, :open 1.06748, :low 1.066925, :high 1.06756, :close 1.067145}
   {:unixtimestamp 1487311200000, :open 1.06712, :low 1.06654, :high 1.067345, :close 1.066675}
   {:unixtimestamp 1487314800000, :open 1.066655, :low 1.065465, :high 1.0673300000000001, :close 1.0655450000000002}
   {:unixtimestamp 1487318400000, :open 1.065525, :low 1.0640749999999999, :high 1.06588, :close 1.064845}
   {:unixtimestamp 1487322000000, :open 1.064825, :low 1.0637400000000001, :high 1.06535, :close 1.0643449999999999}
   {:unixtimestamp 1487325600000, :open 1.0643150000000001, :low 1.064, :high 1.065245, :close 1.064505}
   {:unixtimestamp 1487329200000, :open 1.064485, :low 1.06418, :high 1.06501, :close 1.06467}
   {:unixtimestamp 1487332800000, :open 1.064645, :low 1.064495, :high 1.06579, :close 1.064695}
   {:unixtimestamp 1487336400000, :open 1.064715, :low 1.06448, :high 1.0657999999999999, :close 1.065355}
  ]
    )
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple))
  (vs/plot-standard-candles u/green-stop-out)
(vs/plot-standard-candles 
    [{:open 1 :high 1.3 :low 0.9 :close 1.2 :unixtimestamp 1479347761}
                     {:open 1.2 :high 1.4 :low 1.1 :close 1.3 :unixtimestamp 1479358762}
                     {:open 1.3 :high 1.5 :low 1 :close 1.4 :unixtimestamp 1479369763}]
    )
(vs/plot-standard-candles 
    [{:open 1 :high 1.3 :low 0.9 :close 1.2 :unixtimestamp 1479346761}
     {:open 1.2 :high 1.4 :low 1.1 :close 1.3 :unixtimestamp 1479356762}
     {:open 1.3 :high 1.5 :low 1.15 :close 1.25 :unixtimestamp 1479366763}]
    )
(vs/plot-standard-candles 
    [{:open 1.2 :high 1.4 :low 1.1 :close 1.3 :unixtimestamp 1479356762}
     {:open 1.3 :high 1.3 :low 1.15 :close 1.25 :unixtimestamp 1479366763}]
    )
(vs/plot-standard-candles 
    [{:open 1.2 :high 1.5 :low 1.1 :close 1.3 :unixtimestamp 1479356762}
     {:open 1.3 :high 1.4 :low 1.15 :close 1.25 :unixtimestamp 1479366763}]
    )
(vs/plot-standard-candles 
    [{:open 1.2 :high 1.5 :low 1.1 :close 1.3 :unixtimestamp 1479356762}
     {:open 1.3 :high 1.4 :low 1.15 :close 1.20 :unixtimestamp 1479366763}]
    )
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple))
(vs/plot-standard-candles 
    [{:open 1 :high 1.3 :low 0.9 :close 1.2 :unixtimestamp 1479346761}
     {:open 1.2 :high 1.4 :low 1.1 :close 1.3 :unixtimestamp 1479356762}
     {:open 1.3 :high 1.5 :low 1.15 :close 1.25 :unixtimestamp 1479366763}]
    )
  (vs/plot-standard-candles u/green->red)
marginalia
(marginalia)
(my-task)
(boot (marginalia)
)
(boot (marginalia))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (maraginalia)))
(boot (maraginalia))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
(vs/plot-standard-candles 
    [{:open 1 :high 1.3 :low 0.9 :close 1.2 :unixtimestamp 1479346761}
     {:open 1.2 :high 1.4 :low 1.1 :close 1.3 :unixtimestamp 1479356762}
     {:open 1.3 :high 1.5 :low 1.15 :close 1.25 :unixtimestamp 1479366763}]
    )
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
  (vs/plot-standard-candles u/green->green->green-stop-out)
  (vs/plot-standard-candles u/green->green->red)
  (load-file "src/core/utils.clj")
(vs/plot-standard-candles 
    [{:open 1 :high 1.3 :low 0.9 :close 1.2 :unixtimestamp 1479346761}
     {:open 1.2 :high 1.4 :low 1.1 :close 1.3 :unixtimestamp 1479356762}
     {:open 1.3 :high 1.5 :low 1.15 :close 1.25 :unixtimestamp 1479366763}]
)
  (vs/plot-standard-candles u/green->green->red)
  (load-file "src/core/utils.clj")
  (vs/plot-standard-candles u/green->green->red)
  (vs/plot-standard-candles u/red-stop-out)
  (load-file "src/core/utils.clj")
  (vs/plot-standard-candles u/red->green)
  (load-file "src/core/utils.clj")
  (vs/plot-standard-candles u/red->green)
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
  (vs/plot-standard-candles u/red->reversal)
  (vs/plot-standard-candles u/red-reversal)
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
  (vs/plot-standard-candles u/green-reversal)
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
  (vs/plot-standard-candles u/green-half-ratio)
  (vs/plot-standard-candles [u/green-half-ratio])
[u/green-half-ratio]
  (vs/plot-standard-candles [u/green-half-ratio])
  (load-file "src/core/utils.clj")
  (vs/plot-standard-candles [u/green-half-ratio])
[u/green-half-ratio]
  (vs/plot-standard-candles [u/green-half-ratio])
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
(doc watch)
(dev)
(boot (dev)
)
(boot (watch) (test-doc-refresh))
(boot (watch) (marginalia))
(boot (watch) (marginalia) (test-doc-refresh))
(dev)
(run)
(dev)
(test-doc-refresh)
(boot (test-doc-refresh)
)
(rrl)
  (u/digit-count 12345)
  (u/digit-count 12345.909)
  (Math/log10 12345.909)
  (Math/floor (Math/log10 12345.909))
