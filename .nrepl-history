    (map #(clojure.string/split % #"T"))
    (map last)
    frequencies
    (sort-by last)
    reverse
    )
(->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        plot (ich/candle-stick-plot
               :data (ic/to-dataset data)
               :date :unixtimestamp)]
       (ic/view plot))
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        plot (ich/candle-stick-plot
               :data (ic/to-dataset data)
               :date :unixtimestamp)]
       (ic/to-dataset data)
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        plot (ich/candle-stick-plot
               :data (ic/to-dataset data)
               :date :unixtimestamp)]
       
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
       ]
       (ic/to-dataset data)
  
)
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
       ]
       (ic/to-dataset data)
       (ich/xy-plot :data (ic/to-dataset data))
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
       ]
       (ic/to-dataset data)
       (ich/xy-plot (ic/to-dataset data))
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
       ]
       (ic/to-dataset data)
       )
  (let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
       ]
       (ic/with-data (ic/to-dataset data)
        (ich/scatter-plot (ic/$ :col-0) (ic/$ :col-1))
         )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
       ]
       (ic/with-data (ic/to-dataset data)
                     
         )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        ]
       (ic/with-data (ic/to-dataset data)
                     (ic/$ :col-0)
                     )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        ]
       (ic/with-data (ic/to-dataset data)
                     (ic/$ :col-0)
                     (ic/$ :col-1)
                     )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        ]
       (ic/with-data (ic/to-dataset data)
                     (ic/$ :col-0)
                     (ic/$ :col-1)
                     (ic/view ic/$data)
                     )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        ]
       (ic/with-data (ic/to-dataset data)
                     (ic/$ :col-0)
                     (ic/$ :col-1)
                     (ic/view ic/$data)
                     (ich/line-chart :col-0 :col1)
                     )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        ]
       (ic/with-data (ic/to-dataset data)
                     (ic/$ :col-0)
                     (ic/$ :col-1)
                     (ic/view ic/$data)
                     (ic/view (ich/line-chart :col-0 :col1))
                     
                     )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        ]
       (ic/with-data (ic/to-dataset data)
                     (ic/$ :col-0)
                     (ic/$ :col-1)
                     (ic/view ic/$data)
                     (ic/view (ich/line-chart :col-0 :col-1))
                     )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        ]
       (ic/with-data (ic/to-dataset data)
                     (ic/$ :col-0)
                     (ic/$ :col-1)
                     (ic/view ic/$data)
                     (ic/view (ich/line-chart :col-0 :col-1))
                     (ic/view (ic/$order :col-1 :desc))
                     )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        ]
       data
       
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by last)
               reverse)
        ]
       (map
        (fn [x]
           (update-in x [0] u/timestamp->unix)
            )
         data
         )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by first)
               reverse)
        ]
       (map
        (fn [x]
           (update-in x [0] u/timestamp->unix)
            )
         data
         )
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by first)
               reverse)
        ]
       data
       
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by first))
        ]
       data
       )
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) loss-length-filtered)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by first))
        ]
       
       (ic/with-data (ic/to-dataset data)
                     (ic/$ :col-0)
                     (ic/$ :col-1)
                     (ic/view ic/$data)
                     (ic/view (ich/line-chart :col-0 :col-1))
                     (ic/view (ic/$order :col-1 :desc))
                     )
       )
  (def losses (smp/simple-strat-profits oanda-min true))
  (def rslt (smp/create-chains losses))
rslt
(def loss-length (map
                     (fn [{:keys [start end]}]
                         (- end start))
                     rslt))
loss-length
rslt
(let [data (->>
               (map (fn [{:keys [start end]}] (u/to-human start)) rslt)
               (map #(clojure.string/split % #"T"))
               (map last)
               frequencies
               (sort-by first))
        ]
       (ic/with-data (ic/to-dataset data)
                     (ic/$ :col-0)
                     (ic/$ :col-1)
                     (ic/view ic/$data)
                     (ic/view (ich/line-chart :col-0 :col-1))
                     (ic/view (ic/$order :col-1 :desc))
                     )
       )
  (last oanda-min)
(let [{:keys [open low high close] :as candle} (last oanda-min)]
       (cond
         (green? candle) (/ (+ (- high close) (- open low)) (- close open))
         :red (/ (+ (- high open) (- close low)) (- open close))))
(let [{:keys [open low high close] :as candle} (last oanda-min)]
       (cond
         (u/green? candle) (/ (+ (- high close) (- open low)) (- close open))
         :red (/ (+ (- high open) (- close low)) (- open close))))
(last oanda-min)
(let [{:keys [open low high close] :as candle} {:unixtimestamp 1479470400000,
                                                  :open 1,
                                                  :low 0.9,
                                                  :high 1.2,
                                                  :close 1.1}]
       (cond
         (u/green? candle) (/ (+ (- high close) (- open low)) (- close open))
         :red (/ (+ (- high open) (- close low)) (- open close))))
(let [{:keys [open low high close] :as candle} {:unixtimestamp 1479470400000,
                                                  :open 1,
                                                  :low 0.9,
                                                  :high 1.2,
                                                  :close 1.1}]
       (cond
         (u/green? candle) (/ (- close open) (+ (- high close) (- open low)))
         :red (/ (+ (- open close) (- high open) (- close low)))))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple))
(u/body-ratio {:unixtimestamp 1479470400000,
                 :open 1,
                 :low 0.9,
                 :high 1.2,
                 :close 1.1})
(is
   (=
     (/ 0/1 0.2)
     (u/body-ratio green-half-ratio)
     
     ) 
    )
(defn green-half-ratio {:unixtimestamp 1479470400000,
                          :open 1,
                          :low 0.9,
                          :high 1.2,
                          :close 1.1})
(def green-half-ratio {:unixtimestamp 1479470400000,
                          :open 1,
                          :low 0.9,
                          :high 1.2,
                          :close 1.1})
(is
   (=
     (/ 0/1 0.2)
     (u/body-ratio green-half-ratio)
     )
    )
(is
   (=
     (/ 0.1 0.2)
     (u/body-ratio green-half-ratio)
     )
    )
(is
   (=
     (/ 0.1 0.2)
     (format "%.2f" (u/body-ratio green-half-ratio))))
(is
   (=
     (/ 0.1 0.2)
     (double (u/body-ratio green-half-ratio))))
(is
   (=
     (/ 0.1 0.2)
     (float (u/body-ratio green-half-ratio))))
(def green-one-ratio {:unixtimestamp 1479470400000,
                          :open 1,
                          :low 0.9,
                          :high 1.3,
                          :close 1.2})
(is
   (=
     (/ 0.2 0.2)
     (float (u/body-ratio green-one-ratio))))
(def green-onehalf-ratio {:unixtimestamp 1479470400000,
                          :open 1,
                          :low 0.9,
                          :high 1.4,
                          :close 1.3})
is
   (=
     (/ 0.3 0.2)
     (float (u/body-ratio green-onehalf-ratio))))
(is
   (=
     (/ 0.3 0.2)
     (float (u/body-ratio green-onehalf-ratio))))
(is
   (=
     (float (/ 0.3 0.2)) 
     (float (u/body-ratio green-onehalf-ratio))))
  (def red-half-ratio {:unixtimestamp 1479470400000, :open 1, :low 0.8, :high 1.1, :close 0.9})
(is
   (=
     (float (/ 0.1 0.2))
     (float (u/body-ratio red-half-ratio))))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple))
(is
   (=
     (float (/ 0.1 0.2))
     (float (u/body-ratio red-half-ratio))))
  (def red-one-ratio {:unixtimestamp 1479470400000, :open 1, :low 0.7, :high 1.1, :close 0.8})
(is
   (=
     (float (/ 0.2 0.2))
     (float (u/body-ratio red-one-ratio))))
  (def red-onehalf-ratio {:unixtimestamp 1479470400000, :open 1, :low 0.6, :high 1.1, :close 0.7})
(is
    (=
      (float (/ 0.3 0.2))
      (float (u/body-ratio red-onehalf-ratio))))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple))
