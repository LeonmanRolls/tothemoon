    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument)
    (run-tests 'core.utils 'core.simple)
    (boot (marginalia)))
(doc watch)
(dev)
(boot (dev)
)
(boot (watch) (test-doc-refresh))
(boot (watch) (marginalia))
(boot (watch) (marginalia) (test-doc-refresh))
(dev)
(run)
(dev)
(test-doc-refresh)
(boot (test-doc-refresh)
)
(rrl)
  (u/digit-count 12345)
  (u/digit-count 12345.909)
  (Math/log10 12345.909)
  (Math/floor (Math/log10 12345.909))
  (u/to-human 1479470400000)
  (u/map->mapofcol {:unixtimestamp 1479470400000, :open 1, :low 0.6, :high 1.1, :close 0.7})
(defn map->mapofcol 
    "Puts the vals of a map into vectors" 
    [damap]
(map (fn [x] [(first x) [(last x)]]) damap)
    )
  (u/map->mapofcol {:unixtimestamp 1479470400000, :open 1, :low 0.6, :high 1.1, :close 0.7})
  (u/json-get "https://jsonplaceholder.typicode.com")
  (u/json-get "https://jsonplaceholder.typicode.com/posts/1")
  (u/json-get "http://ip.jsontest.com/")
  (type (u/json-get "http://ip.jsontest.com/"))
  (load-file "src/core/utils.clj")
  (type (u/json-get "http://ip.jsontest.com/"))
  (u/to-human 1479470400000)
  (u/map->mapofcol {:unixtimestamp 1479470400000, :open 1, :low 0.6, :high 1.1, :close 0.7})
  (series-insert [1 2 3] {:one 1 :two 2 :three 3})
  (u/series-insert [1 2 3] {:one 1 :two 2 :three 3})
(rrl)
  (smp/simple-strat-perc-live (first (ds/oanda-historical "EUR_USD" "10" "M5")))
(def price-hist (atom {:current-order {}
                         :open-date nil
                         :stop-loss nil
                         :buy-or-sell nil
                         :order-price nil
                         :account 1000
                         :history []}))
  (swap! price-hist smp/simple-strat-perc-live (first (ds/oanda-historical "EUR_USD" "10" "M5")))
  (swap! price-hist smp/simple-strat-perc-live (ds/oanda-historical "EUR_USD" "10" "M5"))
  (contains? @price-hist :current-order)
  (smp/simple-strat-perc-live price-hist (first (ds/oanda-historical "EUR_USD" "10" "M5")))
  (smp/simple-strat-perc-live @price-hist (first (ds/oanda-historical "EUR_USD" "10" "M5")))
(contains? 
    (smp/simple-strat-perc-live @price-hist (first (ds/oanda-historical "EUR_USD" "10" "M5")))
    :current-order)
(def price-hist (atom {:current-order {}
                         :open-date nil
                         :stop-loss nil
                         :buy-or-sell nil
                         :order-price nil
                         :account 1000
                         :history []}))
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
    (is (= "world"  (:hello (u/json-get "/something")))))
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
    (is (= "world"  (:hello (u/json-get "/something")))))
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
    (is (= "world"  (:hello (u/json-get "http://www.google.com/something")))))
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
    (is (= "world"  (:hello (u/json-get (str uri "/something"))))))
(with-routes!
    {(str "/accounts/" "101-004-4632889-001" "/orders")  {:status 200 :content-type "application/json"
                                                          :body   (jsn/write-str {:hello "world"})}}
    (simple-strat-perc-live 
      u/oanda-account-rep
      (first (ds/oanda-historical "EUR_USD" "10" "M5")))
    )
(with-routes!
    {(str "/accounts/" "101-004-4632889-001" "/orders")  {:status 200 :content-type "application/json"
                                                          :body   (jsn/write-str {:hello "world"})}}
    (smp/simple-strat-perc-live 
      u/oanda-account-rep
      (first (ds/oanda-historical "EUR_USD" "10" "M5")))
    )
(rrl)
(go 
    (with-routes!
      {"/something" {:status 200 :content-type "application/json"
                     :body   (jsn/write-str {:hello "world"})}}
      (println "" (:hello (<! (http-request-cas (str url "/something") {} {}))))
      ) 
    )
(go 
    (with-routes!
      {"/something" {:status 200 :content-type "application/json"
                     :body   (jsn/write-str {:hello "world"})}}
      (println "" (:hello (<! (ds/http-request-cas (str url "/something") {} {}))))
      ) 
    )
(with-routes!
      {"/something" {:status 200 :content-type "application/json"
                     :body   (jsn/write-str {:hello "world"})}}
      (println "" (:hello (<! (ds/http-request-cas (str url "/something") {} {}))))
      )
(go 
    (with-routes!
      {"/something" {:status 200 :content-type "application/json"
                     :body   (jsn/write-str {:hello "world"})}}
      (println "" (:hello (<! (ds/http-request-cas (str uri "/something") {} {}))))
      ) 
    )
(with-routes!
      {"/something" {:status 200 :content-type "application/json"
                     :body   (jsn/write-str {:hello "world"})}}
      (println "" (:hello (<!! (ds/http-request-cas (str uri "/something") {} {}))))
      )
(go 
    (with-routes!
      {"/something" {:status 200 :content-type "application/json"
                     :body   (jsn/write-str {:hello "world"})}}
      (:hello (<!! (ds/http-request-cas (str uri "/something") {} {})))
      ) 
    )
(with-routes!
      {"/something" {:status 200 :content-type "application/json"
                     :body   (jsn/write-str {:hello "world"})}}
      (:hello (<!! (ds/http-request-cas (str uri "/something") {} {})))
      )
(defn basic-stub
    "Takes a function that executes a request when given a url and returns the result on a channel." 
    [req-fn] 
    (with-routes!
      {"/something" {:status 200 :content-type "application/json"
                     :body   (jsn/write-str {:hello "world"})}}
      (:hello (<!! (req-fn (str uri "/something"))))))
  (basic-stub (fn [url] (ds/http-request-cas url {} {}) ))
u/oanda-account-rep
  (smp/simple-strat u/oanda-account-rep (ds/oanda-historical "EUR_USD" "10" "M5"))
  (smp/simple-strat @price-hist (ds/oanda-historical "EUR_USD" "10" "M5"))
  (def price-hist (atom {:current-order {}
                         :open-date nil
                         :stop-loss nil
                         :buy-or-sell nil
                         :order-price nil
                         :account 1000
                         :history []}))
  (smp/simple-strat @price-hist (ds/oanda-historical "EUR_USD" "10" "M5"))
  (smp/simple-strat-live @price-hist (ds/oanda-historical "EUR_USD" "10" "M5"))
  (ds/oanda-open-order-cas (chan) "EUR_USD" 100)
(rrl)
  (ds/oanda-open-order-cas (chan) "EUR_USD" 100)
(rrl)
  (ds/oanda-open-order-cas (chan) "EUR_USD" 100)
(rrl)
(defn http-request-cas 
    "http request that puts the result on a cas channel"
    [url headers body method]
    (with-open [client (http/create-client)]
      (let [resp (method client
                            url
                            :headers headers 
                            :body (jsn/write-str body))]
        (http/await resp)
        (go (jsn/read-str (http/string resp) :key-fn keyword)))))
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
    (is 
      (= "world" (:hello (<!! (http-request-cas (str uri "/something") {} {} http/GET))))))
(defn http-request-cas 
    "http request that puts the result on a cas channel"
    [url headers body method]
    (with-open [client (http/create-client)]
      (let [resp (method client
                            url
                            :headers headers 
                            :body (jsn/write-str body))]
        (http/await resp)
        (go (jsn/read-str (http/string resp) :key-fn keyword)))))
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
    (is 
      (= "world" (:hello (<!! (http-request-cas (str uri "/something") {} {} http/GET))))))
(rrl)
  (<!! (http-request-cas (str uri "/something") {} http/GET))
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
  (<!! (http-request-cas (str uri "/something") {} http/GET))
    )
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
  (<!! (http-cas (str uri "/something") {} http/GET))
    )
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
  (<!! (ds/http-cas (str uri "/something") {} http/GET))
    )
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
    (is 
      (= "world" (:hello (<!! (http-cas (str uri "/something") {} http/GET))))))
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
    (is 
      (= "world" (:hello (<!! (ds/http-cas (str uri "/something") {} http/GET))))))
 (u/basic-stub (fn [uri] (http-cas uri {} http/GET)))
 (u/basic-stub (fn [uri] (ds/http-cas uri {} http/GET)))
(with-routes! { "/something" {:status 200 :content-type "text/plain" :body "body"}}
    (client/get ...)
    (let [responses (recorded-responses server)]
      (println responses)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count responses)))))
(with-routes! { "/something" {:status 200 :content-type "text/plain" :body "body"}}
    (<!! (http-cas uri {} http/GET))
    (let [responses (recorded-responses server)]
      (println responses)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count responses)))))
(with-routes! { "/something" {:status 200 :content-type "text/plain" :body "body"}}
    (<!! (ds/http-cas uri {} http/GET))
    (let [responses (recorded-responses server)]
      (println responses)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count responses)))))
(with-routes! { "/something" {:status 200 :content-type "text/plain" :body "body"}}
    (<!! (ds/http-cas (str uri "/something") {} http/GET))
    (let [responses (recorded-responses server)]
      (println responses)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count responses)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body "body"}}
    (<!! (ds/http-cas (str uri "/something") {} http/GET))
    (let [responses (recorded-responses server)]
      (println responses)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count responses)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (clj->js {:hi "there"})}}
    (<!! (ds/http-cas (str uri "/something") {} http/GET))
    (let [responses (recorded-responses server)]
      (println responses)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count responses)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (json/write-str {:hi "there"})}}
    (<!! (ds/http-cas (str uri "/something") {} http/GET))
    (let [responses (recorded-responses server)]
      (println responses)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count responses)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/http-cas (str uri "/something") {} http/GET))
    (let [responses (recorded-responses server)]
      (println responses)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count responses)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/http-cas (str uri "/something") {} http/GET))
    (let [requests (recorded-requests server)]
      (println requests)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count responses)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/http-cas (str uri "/something") {} http/GET))
    (let [requests (recorded-requests server)]
      (println requests)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! {} http/GET (str uri "/something")))
    (let [requests (recorded-requests server)]
      (println requests)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(rrl)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something")))
    (let [requests (recorded-requests server)]
      (println requests)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(rrl)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something")))
    (let [requests (recorded-requests server)]
      (println requests)
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something")))
    (let [requests (recorded-requests server)]
      (println (jsn/read-str (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something")))
    (let [requests (recorded-requests server)]
      (println (first (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something")))
    (let [requests (recorded-requests server)]
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something")))
    (let [requests (recorded-requests server)]
      (reset! cache (first requests))
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
  (def cache (atom []))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something")))
    (let [requests (recorded-requests server)]
      (reset! cache (first requests))
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
@cache
  (type @cache)
(:body @cache)
(last (:body @cache))
  (doc aget)
(aget (:body @cache) 0)
(get (:body @cache) 0)
  (doc aget)
  (type (:body @cache))
(get (:body @cache) postData)
(get (:body @cache) 'postData)
(get (:body @cache) "postData")
  (type (get (:body @cache) "postData"))
(jsn/read-str 
  (type (get (:body @cache) "postData"))  
    )
(jsn/read-str 
    (get (:body @cache) "postData")
    )
(jsn/read-str 
    (type (get (:body @cache) "postData"))  
    :key-fn
    keyword
    )
(jsn/read-str 
(get (:body @cache) "postData")
    :key-fn
    keyword
    )
(jsn/read-str 
    (get (:body @cache) "postData")
    :key-fn
    keyword
    )
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something") 100))
    (let [requests (recorded-requests server)]
      (reset! cache (first requests))
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something") ))
    (let [requests (recorded-requests server)]
      (reset! cache (first requests))
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something") 123.233))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something") 123.233))
    (let [requests (recorded-requests server)]
      (reset! cache (first requests))
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(rrl)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something") 123.233))
    (let [requests (recorded-requests server)]
      (reset! cache (first requests))
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(rrl)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100  (str uri "/something") 123.233))
    (let [requests (recorded-requests server)]
      (reset! cache (first requests))
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(with-test 
  (defn oanda-open-order-cas! 
    "Open oanda order e.g. [EUR_USD 100]" 
    ([instrument units]
     (oanda-open-order-cas! instrument units (str rest-api-base-v3 "accounts/" account-no "/orders")))
    ([instrument units url]
     (http-body-cas url (oanda-order-header-gen) (order-gen units instrument) http/POST))
    ([instrument units url stoploss]
     (println (update-in (order-gen units instrument) :order merge (stop-loss-gen stoploss)))
     #_(http-body-cas  
       url 
       (oanda-order-header-gen)
       (update-in (order-gen units instrument) :order merge (stop-loss-gen stoploss))
       http/POST))) 
  )
(rrl)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something") 123.233))
    (let [requests (recorded-requests server)]
      (reset! cache (first requests))
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(update-in (ds/order-gen 100 "EUR_USD") :order merge (ds/stop-loss-gen 100))
(ds/stop-loss-gen 100)
(update-in (ds/order-gen 100 "EUR_USD") [:order] merge (ds/stop-loss-gen 100))
(rrl)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something") 123.233))
    (let [requests (recorded-requests server)]
      (reset! cache (first requests))
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(jsn/read-str 
    (get (:body @cache) "postData")
    :key-fn
    keyword
    )
(defn mock-req->body-data
    "Takes a mock request and returns the body of the response as a map" 
    [mock-req]
    (jsn/read-str 
      (get (:body mock-req) "postData")))
  (mock-req->body-data @cache)
(defn mock-req->body-data
    "Takes a mock request and returns the body of the response as a map" 
    [mock-req]
    (jsn/read-str (get (:body mock-req) "postData") :key-fn keyword ))
  (mock-req->body-data @cache)
(rrl)
  (u/mock-req->body-data @cache)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something") 123.233))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data @cache))]
      (println (contains? :stopLossOnFill order))
      (is (= 1 (count requests)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something") 123.233))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data @cache))]
      (println (contains? order :stopLossOnFill))
      (is (= 1 (count requests)))))
(all-ns)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something")))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data @cache))]
      order))
(rrl)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something")))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data @cache))]
      order))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 :url (str uri "/something")))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data @cache))]
      order))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 :url (str uri "/something")))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data (first requests)))]
      order))
