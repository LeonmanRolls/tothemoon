    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something") 123.233))
    (let [requests (recorded-requests server)]
      (reset! cache (first requests))
      (println (type (:body (first requests))))
      ; Now do something with the responses, for example count them      
      (is (= 1 (count requests)))))
(jsn/read-str 
    (get (:body @cache) "postData")
    :key-fn
    keyword
    )
(defn mock-req->body-data
    "Takes a mock request and returns the body of the response as a map" 
    [mock-req]
    (jsn/read-str 
      (get (:body mock-req) "postData")))
  (mock-req->body-data @cache)
(defn mock-req->body-data
    "Takes a mock request and returns the body of the response as a map" 
    [mock-req]
    (jsn/read-str (get (:body mock-req) "postData") :key-fn keyword ))
  (mock-req->body-data @cache)
(rrl)
  (u/mock-req->body-data @cache)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something") 123.233))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data @cache))]
      (println (contains? :stopLossOnFill order))
      (is (= 1 (count requests)))))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something") 123.233))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data @cache))]
      (println (contains? order :stopLossOnFill))
      (is (= 1 (count requests)))))
(all-ns)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something")))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data @cache))]
      order))
(rrl)
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 (str uri "/something")))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data @cache))]
      order))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 :url (str uri "/something")))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data @cache))]
      order))
(with-routes! {"/something" {:status 200 :content-type "text/plain" :body (jsn/write-str {:hi "there"})}}
    (<!! (ds/oanda-open-order-cas! "EUR_USD" 100 :url (str uri "/something")))
    (let [requests (recorded-requests server)
          order (:order (u/mock-req->body-data (first requests)))]
      order))
 (smp/simple-strat-live! @price-hist (ds/oanda-historical "EUR_USD" "10" "M5"))
(rrl)
 (smp/simple-strat-live! @price-hist (ds/oanda-historical "EUR_USD" "10" "M5"))
 (smp/simple-strat-live @price-hist (ds/oanda-historical "EUR_USD" "10" "M5"))
  (smp/simple-strat (ds/oanda-historical "EUR_USD" "10" "M5"))
(vs/plot-standard-candles [u/green-half-ratio])
  (vs/plot-standard-candles (vec u/green-half-ratio))
  (vs/plot-standard-candles (vec u/green-half-ratio u/green-half-ratio))
  (vs/plot-standard-candles [u/green-half-ratio u/green-half-ratio])
  (vs/plot-standard-candles [u/green-half-ratio u/green-half-ratio u/green-half-ratio])
  (def bla (vs/plot-standard-candles [u/green-half-ratio u/green-half-ratio]))
(.close bla)
(rrl)
  (def bla (vs/plot-standard-candles [u/green-half-ratio u/green-half-ratio]))
bla
  (.getClass bla)
  (.getMethods (.getClass bla))
  (vec (.getMethods (.getClass bla)))
  (ns-unmap 'boot.user 'bla)
bla
  (vec (.getMethods (.getClass bla)))
  (def bla (vs/plot-standard-candles [u/green-half-ratio u/green-half-ratio]))
  (.dispose bla)
  (clojure.pprint/pprint (vec (.getMethods (.getClass bla))))
(> nil 3)
(identity "buy")
  (simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "M5")))
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "M5")))
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "1H")))
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")))
(rrl)
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")))
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")) "http://google.com")
(rrl)
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")) "http://google.com")
(rrl)
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")) "http://google.com")
(rrl)
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")) "http://google.com")
(rrl)
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")) "http://google.com")
(ts/unstrument)
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")) "http://google.com")
(rrl)
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")) "http://google.com")
(rrl)
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")) "http://google.com")
(ts/unstrument)
  (smp/simple-strat-perc-live u/oanda-account-rep (first (ds/oanda-historical "EUR_USD" "10" "H1")) "http://google.com")
  (apply (fn [& opts] opts) 1 2 3 '(4 5 6)
)
  (apply (fn [& opts] opts) 1 2 3 '(4 5 6))
(rrl)
  (apply (fn [& opts] opts) 1 2 3 nil)
(smp/simple-strat-perc-candleratio (first (ds/oanda-historical "EUR_USD" "10" "H1")) nil 
                                    :live true :instrument "EUR_USD" :units 100)
(smp/simple-strat-perc-candleratio (ds/oanda-historical "EUR_USD" "10" "H1") nil 
                                    :live true :instrument "EUR_USD" :units 100)
(smp/simple-strat-perc-candleratio (ds/oanda-historical "EUR_USD" "10" "H1") 1 
                                    :live true :instrument "EUR_USD" :units 100)
(in-ns 'core.spike)
(as-> (str "https://www.cryptocompare.com/api/data/histoday/?aggregate=1&e=CCCAGG&fsym=ETH&limit=1000&tsym=BTC") x
                    (cnt/get x) 
                    (:body x)
                    (jsn/read-str x :key-fn keyword)
                    (:Data x)
                    (update-key x :open :price)
                    (update-key x :time :unixtimestamp)
                    (grad-calc x))
(let [gradz (as-> (str "https://www.cryptocompare.com/api/data/histoday/?aggregate=1&e=CCCAGG&fsym=ETH&limit=1000&tsym=BTC") x
                    (cnt/get x) 
                    (:body x)
                    (jsn/read-str x :key-fn keyword)
                    (:Data x)
                    (update-key x :open :price)
                    (update-key x :time :unixtimestamp)
                    (grad-calc x))
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot  
               unixtimestamp
               price
               :points true)
        ]
(consecutive-gradient-pos gradz 0.00000001 plot 1)
    (ic/view plot)
    )
(let [gradz (get-gradients-cc "ETH" "BTC" "1000")
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot  
               unixtimestamp
               price
               :points true)
        ]
(consecutive-gradient-pos gradz 0.00000001 plot 1)
    (ic/view plot)
    )
(defn get-gradients-cc 
  "Get historical data for supplied currency pair from crypto compare and calculate gradients for each candle."  
  [fsym tsym limit]
  (as-> (str "https://www.cryptocompare.com/api/data/histoday/?aggregate=1&e=CCCAGG&fsym=" fsym "&limit=" limit "&tsym=" tsym) x
        (cnt/get x) 
        (:body x)
        (jsn/read-str x :key-fn keyword)
        (:Data x)
        (update-key x :open :price)
        (update-key x :time :unixtimestamp)
        (grad-calc x)))
(let [gradz (get-gradients-cc "ETH" "BTC" "1000")
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot  
               unixtimestamp
               price
               :points true)
        ]
(consecutive-gradient-pos gradz 0.00000001 plot 1)
    (ic/view plot)
    )
(get-gradients-cc "ETH" "BTC" "1000")
(in-ns 'core.spike)
(let [gradz (get-gradients-cc "ETH" "BTC" "1000")
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot  
               unixtimestamp
               price
               :points true)
        ]
(consecutive-gradient-pos gradz 0.00000001 plot 1)
    (ic/view plot)
    )
(->
    (get-gradients-cc "ETH" "BTC" "1000")
    reduce->mapofcol
    )
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
(cnt/get (str url "/something"))
     
    )
l
(rrl)
(ns core.spike
  "Spike theory or 'pump and dump'. This started with noticing that many crypto currencies at some point in their 
  existence go through a sharp rise followed by sharp fall in price. The goal of this strategy is to try to identify 
  when a spike is happening early enough to get in and then to get out for a profit. More or less and impossible task. "
  (:require
    [clj-http.client :as cnt]
    [clojure.data.json :as jsn]
    [clojurewerkz.envision.core :as envision]
    [clojurewerkz.envision.chart-config :as cfg]
    [clojure.spec :as s]
    [clojure.spec.gen :as gen]
    [clojure.spec.test :as ts :refer [check]]
    [clojure.spec.gen :as gen]
    [incanter.core :as ic]
    [incanter.stats :as is]
    [incanter.charts :as ich]
    [incanter.datasets :as id]
    [clj-time.core :as t]
    [clj-time.format :as f]
    [clj-time.coerce :as c]
    [clojure.set :as set]
    [core.utils :as u]
    [clojure.core.logic :as lgc]
    [stub-http.core :refer :all]))
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
    (cnt/get (str url "/something"))
    )
(with-routes!
    {"/something" {:status 200 :content-type "application/json"
                   :body   (jsn/write-str {:hello "world"})}}
    (cnt/get (str uri "/something"))
    )
  (get-gradients-cc (cc-historical-url-gen "BTC" "ETH" "1000"))
(defn cc-historical-url-gen 
  "Generate valid url for getting historical data from cryptocompare.com" 
  [fsym tsym limit]
  (str "https://www.cryptocompare.com/api/data/histoday/?aggregate=1&e=CCCAGG&fsym=" fsym "&limit=" limit "&tsym=" tsym))
  (get-gradients-cc (cc-historical-url-gen "BTC" "ETH" "1000"))
(defn get-gradients-cc 
  "Get historical data for supplied currency pair from crypto compare and calculate gradients for each candle."  
  [url]
  (as-> url x
        (cnt/get x) 
        (:body x)
        (jsn/read-str x :key-fn keyword)
        (:Data x)
        (update-key x :open :price)
        (update-key x :time :unixtimestamp)
        (grad-calc x)))
  (get-gradients-cc (cc-historical-url-gen "BTC" "ETH" "1000"))
  (get-gradients-cc (cc-historical-url-gen "BTC" "ETH" "10"))
(cc-historical-url-gen "BTC" "ETH" "10")
  (get-gradients-cc (cc-historical-url-gen "BTC" "ETH" "100"))
  (get-gradients-cc (cc-historical-url-gen "BTC" "ETH" "1000"))
  (reset! cache (get-gradients-cc (cc-historical-url-gen "BTC" "ETH" "1000")))
  (def cache (atom []))
  (reset! cache (get-gradients-cc (cc-historical-url-gen "BTC" "ETH" "1000")))
@cache
  (take 5 cache)
  (take 5 @cache)
  (cnt/get (cc-historical-url-gen "BTC" "ETH" "1000"))
  (cnt/get (cc-historical-url-gen "BTC" "ETH" "100"))
(def cc-historical-sample-response
  "Sample response from crypto compare takeon on 22/02/2017"
  {:status 200, 
   :headers {"Server" "cloudflare-nginx", 
             "Content-Type" "application/json; charset=utf-8", 
             "Access-Control-Allow-Origin" "*", 
             "Connection" "close", 
             "Transfer-Encoding" "chunked", 
             "CF-RAY" "335006608f1913d1-LAX", 
             "Date" "Wed, 22 Feb 2017 05:26:45 GMT", 
             "Cache-Control" "private"}, 
   :body "{\"Response\":\"Success\",\"Message\":\"Battlecruiser operational.Make it happen.Set a course.Take it slow.\",\"Type\":100,\"Aggrgated\":false,\"Data\":[],\"FirstValue\":{\"time\":1473120000.0,\"open\":51.95,\"high\":52.63,\"low\":51.59,\"close\":52.63,\"volumefrom\":0.67537014000000006,\"volumeto\":35.074823825518628},\"TimeTo\":1487721600,\"TimeFrom\":1479081600}", 
   :request-time 1885, 
   :trace-redirects ["https://www.cryptocompare.com/api/data/histoday/?aggregate=1&e=CCCAGG&fsym=BTC&limit=100&tsym=ETH"], 
   :orig-content-encoding "gzip", 
   :cookies {"__cfduid" {:discard false, 
                         :domain "cryptocompare.com", 
                         :expires #inst "2018-02-22T05:26:44.000-00:00", 
                         :path "/", 
                         :secure false, 
                         :value "dac978638ba46f2d26700642dc07c68621487741204", 
                         :version 0}}})
(with-routes!
    {"/something" cc-historical-sample-response}
    (cnt/get (str uri "/something"))
    )
(with-routes!
    {"/something" cc-historical-sample-response}
  (get-gradients-cc (str uri "/something"))
    )
(defn get-gradients-cc 
  "Get historical data for supplied currency pair from crypto compare and calculate gradients for each candle."  
  [url]
  (as-> url x
        (cnt/get x) 
        (:body x)
        (jsn/read-str x :key-fn keyword)
        (:Data x)
        (update-key x :open :price)
        (update-key x :time :unixtimestamp)
        (println x)
        (grad-calc x)))
(with-routes!
    {"/something" cc-historical-sample-response}
  (get-gradients-cc (str uri "/something"))
    )
(defn get-gradients-cc 
  "Get historical data for supplied currency pair from crypto compare and calculate gradients for each candle."  
  [url]
  (as-> url x
        (cnt/get x) 
        (:body x)
        (jsn/read-str x :key-fn keyword)
        (:Data x)
        (update-key x :open :price)
        (update-key x :time :unixtimestamp)
        (grad-calc x)))
(with-routes!
    {"/something" cc-historical-sample-response}
  (get-gradients-cc (str uri "/something"))
    )
(defn get-gradients-cc 
  "Get historical data for supplied currency pair from crypto compare and calculate gradients for each candle."  
  [url]
  (as-> url x
        (cnt/get x) 
        )
  #_(as-> url x
        (cnt/get x) 
        (:body x)
        (jsn/read-str x :key-fn keyword)
        (:Data x)
        (update-key x :open :price)
        (update-key x :time :unixtimestamp)
        (grad-calc x)))
(with-routes!
    {"/something" cc-historical-sample-response}
  (get-gradients-cc (str uri "/something"))
    )
  (cnt/get (cc-historical-url-gen "BTC" "ETH" "100"))
  (cnt/get (cc-historical-url-gen "BTC" "ETH" "500"))
  (cnt/get (cc-historical-url-gen "BTC" "ETH" "200"))
  (cnt/get (cc-historical-url-gen "BTC" "ETH" "100"))
  (cnt/get (cc-historical-url-gen "BTC" "ETH" "101"))
  (cnt/get (cc-historical-url-gen "BTC" "ETH" "150"))
  (cnt/get (cc-historical-url-gen "BTC" "ETH" "200"))
(def cc-historical-sample-response
  "Sample response from crypto compare takeon on 22/02/2017"
  {:status 200, 
   :headers {"Server" "cloudflare-nginx", 
             "Content-Type" "application/json; charset=utf-8", 
             "Access-Control-Allow-Origin" "*", 
             "Connection" "close", 
             "Transfer-Encoding" "chunked", 
             "CF-RAY" "335015ab6f1520f0-LAX", 
             "Date" "Wed, 22 Feb 2017 05:37:11 GMT", 
             "Cache-Control" "private"}, 
   :body "{\"Response\":\"Success\",\"Message\":\"Battlecruiser operational.Make it happen.Set a course.Take it slow.\",\"Type\":100,\"Aggrgated\":false,\"Data\":[{\"time\":1470441600.0,\"open\":53.76,\"high\":54.11,\"low\":52.36,\"close\":54.11,\"volumefrom\":4.3085315400000006,\"volumeto\":230.9746682058271},{\"time\":1470528000.0,\"open\":54.11,\"high\":54.29,\"low\":51.02,\"close\":54.29,\"volumefrom\":5.5666466000000012,\"volumeto\":293.26111067387626},{\"time\":1470614400.0,\"open\":52.36,\"high\":54.29,\"low\":52.36,\"close\":54.29,\"volumefrom\":3.2970752999999995,\"volumeto\":177.8866873675988}],\"FirstValueInArray\":true,\"TimeTo\":1487721600,\"TimeFrom\":1470441600}", 
   :request-time 734, 
   :trace-redirects ["https://www.cryptocompare.com/api/data/histoday/?aggregate=1&e=CCCAGG&fsym=BTC&limit=200&tsym=ETH"], 
   :orig-content-encoding "gzip", 
   :cookies {"__cfduid" {:discard false, :domain "cryptocompare.com", 
                         :expires #inst "2018-02-22T05:37:11.000-00:00", 
                         :path "/", 
                         :secure false, 
                         :value "d0d3ea2639b89495432ae6af3d3d03c671487741831", 
                         :version 0}}})
(def cc-historical-sample-response
  "Sample response from crypto compare takeon on 22/02/2017"
  {:status 200, 
   :headers {"Server" "cloudflare-nginx", 
             "Content-Type" "application/json; charset=utf-8", 
             "Access-Control-Allow-Origin" "*", 
             "Connection" "close", 
             "Transfer-Encoding" "chunked", 
             "CF-RAY" "335015ab6f1520f0-LAX", 
             "Date" "Wed, 22 Feb 2017 05:37:11 GMT", 
             "Cache-Control" "private"}, 
   :body "{\"Response\":\"Success\",\"Message\":\"Battlecruiser operational.Make it happen.Set a course.Take it slow.\",\"Type\":100,\"Aggrgated\":false,\"Data\":[{\"time\":1470441600.0,\"open\":53.76,\"high\":54.11,\"low\":52.36,\"close\":54.11,\"volumefrom\":4.3085315400000006,\"volumeto\":230.9746682058271},{\"time\":1470528000.0,\"open\":54.11,\"high\":54.29,\"low\":51.02,\"close\":54.29,\"volumefrom\":5.5666466000000012,\"volumeto\":293.26111067387626},{\"time\":1470614400.0,\"open\":52.36,\"high\":54.29,\"low\":52.36,\"close\":54.29,\"volumefrom\":3.2970752999999995,\"volumeto\":177.8866873675988}],\"FirstValueInArray\":true,\"TimeTo\":1487721600,\"TimeFrom\":1470441600}", 
   :request-time 734, 
   :trace-redirects ["https://www.cryptocompare.com/api/data/histoday/?aggregate=1&e=CCCAGG&fsym=BTC&limit=200&tsym=ETH"], 
   :orig-content-encoding "gzip", 
   :cookies {"__cfduid" {:discard false, :domain "cryptocompare.com", 
                         :expires #inst "2018-02-22T05:37:11.000-00:00", 
                         :path "/", 
                         :secure false, 
                         :value "d0d3ea2639b89495432ae6af3d3d03c671487741831", 
                         :version 0}}})
(with-routes!
    {"/something" cc-historical-sample-response}
  (get-gradients-cc (str uri "/something"))
    )
(defn get-gradients-cc 
  "Get historical data for supplied currency pair from crypto compare and calculate gradients for each candle."  
  [url]
  (as-> url x
        (cnt/get x) 
        (:body x)
        (jsn/read-str x :key-fn keyword)
        (:Data x)
        (update-key x :open :price)
        (update-key x :time :unixtimestamp)
        (grad-calc x)))
(with-routes!
    {"/something" cc-historical-sample-response}
  (get-gradients-cc (str uri "/something"))
    )
(let [gradz (get-gradients-cc "ETH" "BTC" "1000")
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot unixtimestamp price :points true)]
    (consecutive-gradient-pos gradz 0.00000001 plot 1)
    (ic/view plot))
(cc-historical-url-gen "ETH" "BTC" "1000")
(let [gradz (get-gradients-cc (cc-historical-url-gen "ETH" "BTC" "1000"))
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot unixtimestamp price :points true)]
    (consecutive-gradient-pos gradz 0.00000001 plot 1)
    (ic/view plot))
(let [gradz (get-gradients-cc (cc-historical-url-gen "ETH" "BTC" "1000"))
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot unixtimestamp price :points true)]
    (consecutive-gradient-pos gradz 0.00000009 plot 1)
    (ic/view plot))
(let [gradz (get-gradients-cc (cc-historical-url-gen "ETH" "BTC" "1000"))
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot unixtimestamp price :points true)]
    (consecutive-gradient-pos gradz 0.00000003 plot 1)
    (ic/view plot))
(let [gradz (get-gradients-cc (cc-historical-url-gen "ETH" "BTC" "1000"))
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot unixtimestamp price :points true)]
    (consecutive-gradient-pos gradz 0.00000005 plot 1)
    (ic/view plot))
(let [gradz (get-gradients-cc (cc-historical-url-gen "ETH" "BTC" "1000"))
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot unixtimestamp price :points true)]
    (consecutive-gradient-pos gradz 0.00000005 plot 1))
(doall 
      (map 
        #(ich/add-pointer plot (:unixtimestamp %) (:price %))  
        highest-grads))
  (display-gradient-strat "ETH" "BTC" "1000" 0.00000005 1)
(defn display-gradient-start
  "Graphically display the gradient strat. This will add indictors to the chart where the gradient algo returns a 
  positive result."
  [fsym tsym limit gradlimit chain-length]
  (let [gradz (get-gradients-cc (cc-historical-url-gen fsym tsym limit))
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot unixtimestamp price :points true)]
    (consecutive-gradient-pos gradz gradlimit plot chain-length)
    (ic/view plot)))
  (display-gradient-strat "ETH" "BTC" "1000" 0.00000005 1)
(defn display-gradient-strat
  "Graphically display the gradient strat. This will add indictors to the chart where the gradient algo returns a 
  positive result."
  [fsym tsym limit gradlimit chain-length]
  (let [gradz (get-gradients-cc (cc-historical-url-gen fsym tsym limit))
        {:keys [grad price unixtimestamp]} (reduce->mapofcol gradz)
        plot (ich/time-series-plot unixtimestamp price :points true)]
    (consecutive-gradient-pos gradz gradlimit plot chain-length)
    (ic/view plot)))
  (display-gradient-strat "ETH" "BTC" "1000" 0.00000005 1)
(price-history-raw "BTC" "ETH")
(price-history-raw "BTC" "DOGE")
(defn price-history-raw [basecurrency othercurrency]
  (as-> (str 
          "https://bittrex.com/api/v1.1/public/getmarkethistory?market=" 
          basecurrency
          "-" 
          othercurrency
          "&count=50") x
        (cnt/get x) 
        (:body x)
        (jsn/read-str x :key-fn keyword)
        (:result x)))
(price-history-raw "BTC" "DOGE")
(as-> "https://bittrex.com/api/v1.1/public/getmarkethistory?market=BTC-DOGE&count=4" x
        (cnt/get x) 
      )
(as-> "http://bittrex.com/api/v1.1/public/getmarkethistory?market=BTC-DOGE&count=4" x
        (cnt/get x) 
      )
(defn price-history-raw [basecurrency othercurrency]
  (as-> (str 
          "http://bittrex.com/api/v1.1/public/getmarkethistory?market=" 
          basecurrency
          "-" 
          othercurrency
          "&count=50") x
        (cnt/get x) 
        (:body x)
        (jsn/read-str x :key-fn keyword)
        (:result x)))
(price-history-raw "BTC" "DOGE")
(price-history-raw "BTC" "ETH")
(price-history-timeseries "BTC" "ETH")
  (get-orderbook-info 10)
