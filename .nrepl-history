   [:unixtimestamp]
   u/to-human
   )
(smp/simple-strat
      (take-last 10 crypto-hist))
(smp/simple-strat
      (take-last 10 crypto-hist)
      :human)
(pprint
    (smp/simple-strat-profit-calc
      (smp/simple-strat
        (take-last 10 crypto-hist)
        :human)))
(pprint
    (smp/simple-strat
      (take-last 10 crypto-hist)
      :human))
(let [plot (ich/candle-stick-plot
               :data (ic/to-dataset (take-last 10 crypto-hist))
               :date :unixtimestamp)]
       (ic/view plot))
(let [plot (ich/candle-stick-plot
               :data (ic/to-dataset (take-last 10 crypto-hist))
               :date :unixtimestamp)]
       (ic/view plot))
(require
  '[http.async.client :as http]
  '[clojure.spec :as s]
  '[clojure.spec.gen :as gen]
  '[clojure.spec.test :as ts :refer [check]]
  '[clojure.spec.gen :as gen]
  '[clojure.core.reducers :as rd]
  '[core.utils :as u]
  '[core.visual :as vs]
  '[core.spike :as sp]
  '[clojure.data.json :as jsn]
  '[core.datasources :as ds]
  '[core.marketcap :as cmc]
  '[core.simple :as smp]
  '[incanter.core :as ic]
  '[incanter.stats :as is]
  '[incanter.charts :as ich]
  '[incanter.datasets :as id])
(require
  '[http.async.client :as http]
  '[clojure.spec :as s]
  '[clojure.spec.gen :as gen]
  '[clojure.spec.test :as ts :refer [check]]
  '[clojure.spec.gen :as gen]
  '[clojure.core.reducers :as rd]
  '[core.utils :as u]
  '[core.visual :as vs]
  '[core.spike :as sp]
  '[clojure.data.json :as jsn]
  '[core.datasources :as ds]
  '[core.marketcap :as cmc]
  '[core.simple :as smp]
  '[incanter.core :as ic]
  '[incanter.stats :as is]
  '[incanter.charts :as ich]
  '[incanter.datasets :as id])
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument))
  (vs/plot-standard-candles crypto-hist)
  (vs/plot-standard-candles (take-last 10 crypto-hist))
(pprint
    (smp/simple-strat
      (take-last 10 crypto-hist)
      :human))
(as-> (take-last 10 crypto-hist) x
       (:greens x) 
        
        )
(as-> (take-last 10 crypto-hist) x
       (:greens x) 
        
        )
(take-last 10 crypto-hist)
(as-> (smp/simple-strat (take-last 10 crypto-hist)) x
        (:greens x)
        )
(as-> (smp/simple-strat (take-last 10 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a y)))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        )
(as-> (smp/simple-strat (take-last 10 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a profit)))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        )
(as-> (smp/simple-strat (take-last 10 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a (select-keys y :profit :basetimestamp))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        )
(as-> (smp/simple-strat (take-last 10 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a (select-keys y [:profit :basetimestamp]))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        )
(as-> (smp/simple-strat (take-last 10 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in % [:basetimestamp] u/to-human)
                                               )
                                             
                                             )))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        )
(as-> (smp/simple-strat (take-last 10 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)
                                               )
                                             )))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        )
(as-> (smp/simple-strat (take-last 100 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        )
(as-> (smp/simple-strat (take-last 100 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        (filter #(<= 4 (count x)) x)
        )
(as-> (smp/simple-strat (take-last 100 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        (filter #(<= 4 (count %)) x)
        )
(as-> (smp/simple-strat (take-last 1000 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        (filter #(<= 4 (count %)) x)
        )
(as-> (smp/simple-strat (take-last 1000 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        (filter #(<= 6 (count %)) x)
        )
(as-> (smp/simple-strat (take-last 1000 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        (filter #(<= 7 (count %)) x)
        )
(as-> (smp/simple-strat (take-last 1000 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        (filter #(<= 8 (count %)) x)
        )
(as-> (smp/simple-strat (take-last 1000 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        (filter #(<= 9 (count %)) x)
        )
(as-> (smp/simple-strat (take-last 1000 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        (filter #(<= 11 (count %)) x)
   
)
crypto-hist
(filter
   #(> (timestamp->unix "2014-08-21T00:00:00.000Z") % (timestamp->unix "2014-09-30T00:00:00.000Z"))
   (take-last 1000 crypto-hist)
    )
(filter
   #(> (u/timestamp->unix "2014-08-21T00:00:00.000Z") % (u/timestamp->unix "2014-09-30T00:00:00.000Z"))
   (take-last 1000 crypto-hist)
    )
(filter
   #(> (u/timestamp->unix "2014-08-21T00:00:00.000Z") (:unixtimestamp %) (u/timestamp->unix "2014-09-30T00:00:00.000Z"))
   (take-last 1000 crypto-hist)
    )
(u/timestamp->unix "2014-08-21T00:00:00.000Z")
(filter
   #(> (u/timestamp->unix "2014-08-21T00:00:00.000Z") 
       (* 1000 (:unixtimestamp %)) 
       (u/timestamp->unix "2014-09-30T00:00:00.000Z"))
   (take-last 1000 crypto-hist)
    )
(u/timestamp->unix "2014-08-21T00:00:00.000Z")
(> (u/timestamp->unix "2014-08-21T00:00:00.000Z") 
     (* 1000 1478995200)  
     (u/timestamp->unix "2014-09-30T00:00:00.000Z"))
(u/timestamp->unix "2014-09-30T00:00:00.000Z")
(> (u/timestamp->unix "2014-08-21T00:00:00.000Z")
     (* 1000 1412033200000)
     (u/timestamp->unix "2014-09-30T00:00:00.000Z"))
(< (u/timestamp->unix "2014-08-21T00:00:00.000Z")
     (* 1000 1412033200000)
     (u/timestamp->unix "2014-09-30T00:00:00.000Z"))
(u/timestamp->unix "2014-08-21T00:00:00.000Z")
(< (u/timestamp->unix "2014-08-21T00:00:00.000Z")
     (* 1000 1412033200000)
     )
  (< 1 2 3)
i(u/timestamp->unix "2014-09-30T00:00:00.000Z")
(u/timestamp->unix "2014-09-30T00:00:00.000Z")
(< (u/timestamp->unix "2014-08-21T00:00:00.000Z")
     (* 1000 1412033200000)
     (u/timestamp->unix "2014-09-30T00:00:00.000Z")
     )
(< (u/timestamp->unix "2014-08-21T00:00:00.000Z")
     (* 1000 1412033200000)
     1412035200000
     )
(< (u/timestamp->unix "2014-08-21T00:00:00.000Z")
     (* 1000 1412033200000)
     1412035200000
     )
 1412035200000
(u/timestamp->unix "2014-08-21T00:00:00.000Z")
(< (u/timestamp->unix "2014-08-21T00:00:00.000Z")
     (* 1000 1412033200)
     1412035200000
     )
(< (u/timestamp->unix "2014-08-21T00:00:00.000Z")
     (* 1000 1412033200)
     (u/timestamp->unix "2014-09-30T00:00:00.000Z")
     )
(take-last 1000 crypto-hist)
(filter
   #(> (u/timestamp->unix "2014-08-21T00:00:00.000Z")
       (* 1000 (:unixtimestamp %))
       (u/timestamp->unix "2014-09-30T00:00:00.000Z"))
   (take-last 1000 crypto-hist)
    )
  (last (take-last 1000 crypto-hist))
(filter
   #(< (u/timestamp->unix "2014-08-21T00:00:00.000Z")
       (* 1000 (:unixtimestamp %))
       (u/timestamp->unix "2014-09-30T00:00:00.000Z"))
   (take-last 1000 crypto-hist)
    )
(u/candles-between 
    "2014-08-21T00:00:00.000Z"
    "2014-09-30T00:00:00.000Z"
    crypto-hist)
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument))
(do
    (load-file "src/core/visual.clj")
    (load-file "src/core/utils.clj")
    (load-file "src/core/datasources.clj")
    (load-file "src/core/simple.clj")
    (load-file "src/core/spike.clj")
    (load-file "src/core/marketcap.clj")
    (load-file "build.boot")
    (ts/unstrument)
    (ts/instrument))
(u/candles-between
    "2014-08-21T00:00:00.000Z"
    "2014-09-30T00:00:00.000Z"
    crypto-hist)
(->
    (u/candles-between
      "2014-08-21T00:00:00.000Z"
      "2014-09-30T00:00:00.000Z"
      crypto-hist)
    (vs/plot-standard-candles)
    )
(->
    (u/candles-between
      "2014-08-21T00:00:00.000Z"
      "2014-09-30T00:00:00.000Z"
      crypto-hist)
    (vs/plot-standard-candles)
    )
(as-> (smp/simple-strat (take-last 1000 crypto-hist)) x
        (:greens x)
        (reduce
          (fn [x {:keys [profit] :as y}]
              (cond
                (> 0 profit) (update-in
                               x
                               [(- (count x) 1)]
                               (fn [a] (conj a
                                             (->
                                               (select-keys y [:profit :basetimestamp])
                                               (update-in [:basetimestamp] u/to-human)))))
                (< 0 profit) (conj x [])
                :else x))
          [[]]
          x)
        (filter #(<= 6 (count %)) x)
        )
