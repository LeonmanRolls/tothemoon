        (go
               (let [shorten (fn [stng length] (if (>= length (count stng)) stng (subs stng 0 length)))
                     c1 (chan)
                     c2 (chan)
                     order-chan (chan)
                     _ (go (println (<! order-chan)))
                     _ (ds/acc-info c1)
                     _ (ds/oanda-history-cas c2 "EUR_USD" "1" "M5")
                     {{:keys [orders balance trades positions]} :account :as account} (<! c1)
                     {trade-price :price} (when (not (empty? trades)) (first trades))
                     {stop-price :price} (when (not (empty? trades)) (first orders))
                     stop-price-num (when (not (empty? trades)) (read-string stop-price))
                     trade-price-num (when (not (empty? trades)) (read-string trade-price))
                     {:keys [tradeID]} (when (not (empty? orders)) (first orders))
                     {:keys [open high low close] :as current-candle} (first (<! c2))
                     balance-lp (shorten (str balance) 4)
                     balance-lp-two (shorten (str (* 2 (read-string balance))) 4)
                     balance-lp "10000"
                     balance-lp-two "20000"
                     low-lp (shorten (str (- low 0.00005) ) 7)
                     high-lp (shorten (str (+ high 0.00005)) 7)]
                    (comment
                      trade-green? (when (not (empty? trades)) (if (< 0 (- trade-price-num stop-price-num)) true false))
                      (println "orders-> " orders)
                      (println "tradeID-> " tradeID)
                      (println "(empty? trades) " (empty? trades))
                      (println "(u/green? current-candle) " (u/green? current-candle))
                      (println "trades " trades)
                      (println "orders " orders)
                      (println "trade-price-num " trade-price-num)
                      (println "stop-price-num " stop-price-num))
                    (when (empty? trades) (reset! trade-green? (if (< 0 (- close open)) true false)))
                    (println "trade-green? " trade-green?)
                    (cond
                      (empty? trades) (cond
                                        (u/green? current-candle)
                                        (do
                                          (println "empty trade green current " low-lp)
                                          (ds/oanda-open-order-cas order-chan "EUR_USD" balance-lp low-lp))
                                        :red (do
                                               (println "empty trade red current " high-lp)
                                               (ds/oanda-open-order-cas order-chan "EUR_USD" (str "-" balance-lp) high-lp)))
                      (u/green? current-candle) (cond
                                                  @trade-green? (do
                                                                 (println "current candle green, green trade " low-lp)
                                                                 (ds/oanda-patch-order-cas order-chan tradeID low-lp))
                                                  :trade-red (do
                                                               (println "current candle green, red trade " balance-lp-two)
                                                               (ds/oanda-open-order-cas order-chan "EUR_USD" (str balance-lp-two) low-lp)
                                                               (reset! trade-green? (if (< 0 (- close open)) true false))
                                                               ))
                      :current-candle-red (cond
                                            @trade-green? (do
                                                           (println "current candle red, green trade " balance-lp-two)
                                                           (ds/oanda-open-order-cas order-chan "EUR_USD" (str "-" balance-lp-two) high-lp)
                                                           (reset! trade-green? (if (< 0 (- close open)) true false))
                                                           )
                                            :trade-red (do
                                                         (println "current candle red, red trade " high-lp)
                                                         (ds/oanda-patch-order-cas order-chan tradeID high-lp))))))
        )
(go
    (let [c (chan)
          trade-green? (atom false)
          _ (u/on-the-minute-second c [4 9 14 19 24 29 34 39 44 49 54 59] [54])]
         (while true
                (println "hey-----------------------------------------" (<! c))
                (testing trade-green?)
                )))
(defn testing [trade-green?]
        (go
               (let [shorten (fn [stng length] (if (>= length (count stng)) stng (subs stng 0 length)))
                     c1 (chan)
                     c2 (chan)
                     order-chan (chan)
                     _ (go (println (<! order-chan)))
                     _ (ds/acc-info c1)
                     _ (ds/oanda-history-cas c2 "EUR_USD" "1" "M5")
                     {{:keys [orders balance trades positions]} :account :as account} (<! c1)
                     {trade-price :price} (when (not (empty? trades)) (first trades))
                     {stop-price :price} (when (not (empty? trades)) (first orders))
                     stop-price-num (when (not (empty? trades)) (read-string stop-price))
                     trade-price-num (when (not (empty? trades)) (read-string trade-price))
                     {:keys [tradeID]} (when (not (empty? orders)) (first orders))
                     {:keys [open high low close] :as current-candle} (first (<! c2))
                     balance-lp (shorten (str balance) 4)
                     balance-lp-two (shorten (str (* 2 (read-string balance))) 4)
                     balance-lp "10000"
                     balance-lp-two "20000"
                     low-lp (shorten (str (- low 0.0001) ) 7)
                     high-lp (shorten (str (+ high 0.0001)) 7)]
                    (comment
                      trade-green? (when (not (empty? trades)) (if (< 0 (- trade-price-num stop-price-num)) true false))
                      (println "orders-> " orders)
                      (println "tradeID-> " tradeID)
                      (println "(empty? trades) " (empty? trades))
                      (println "(u/green? current-candle) " (u/green? current-candle))
                      (println "trades " trades)
                      (println "orders " orders)
                      (println "trade-price-num " trade-price-num)
                      (println "stop-price-num " stop-price-num))
                    (when (empty? trades) (reset! trade-green? (if (< 0 (- close open)) true false)))
                    (println "trade-green? " trade-green?)
                    (cond
                      (empty? trades) (cond
                                        (u/green? current-candle)
                                        (do
                                          (println "empty trade green current " low-lp)
                                          (ds/oanda-open-order-cas order-chan "EUR_USD" balance-lp low-lp))
                                        :red (do
                                               (println "empty trade red current " high-lp)
                                               (ds/oanda-open-order-cas order-chan "EUR_USD" (str "-" balance-lp) high-lp)))
                      (u/green? current-candle) (cond
                                                  @trade-green? (do
                                                                 (println "current candle green, green trade " low-lp)
                                                                 (ds/oanda-patch-order-cas order-chan tradeID low-lp))
                                                  :trade-red (do
                                                               (println "current candle green, red trade " balance-lp-two)
                                                               (ds/oanda-open-order-cas order-chan "EUR_USD" (str balance-lp-two) low-lp)
                                                               (reset! trade-green? (if (< 0 (- close open)) true false))
                                                               ))
                      :current-candle-red (cond
                                            @trade-green? (do
                                                           (println "current candle red, green trade " balance-lp-two)
                                                           (ds/oanda-open-order-cas order-chan "EUR_USD" (str "-" balance-lp-two) high-lp)
                                                           (reset! trade-green? (if (< 0 (- close open)) true false))
                                                           )
                                            :trade-red (do
                                                         (println "current candle red, red trade " high-lp)
                                                         (ds/oanda-patch-order-cas order-chan tradeID high-lp))))))
        )
(go
    (let [c (chan)
          trade-green? (atom false)
          _ (u/on-the-minute-second c [4 9 14 19 24 29 34 39 44 49 54 59] [54])]
         (while true
                (println "hey-----------------------------------------" (<! c))
                (testing trade-green?)
                )))
(def oanda-min (ds/oanda-historical "EUR_USD" "1" "M5")) 
(def oanda-min (ds/oanda-historical "EUR_USD" "1" "M5"))
(ds/oanda-historical "EUR_USD" "1" "M5")
  (let [c (chan)]
       (ds/oanda-history-cas c "EUR_USD" "1" "M5")
       (<!! c))
(def oanda-min (ds/oanda-historical "EUR_USD" "1" "M5"))
(ds/oanda-historical "EUR_USD" "5000" "M5")
(ds/oanda-historical "EUR_USD" "1" "M5")
(def oanda-min (ds/oanda-historical "EUR_USD" "1" "M5"))
oanda-min
  (first oanda-min)
  (:uniximtestamp (first oanda-min)) 
  (:unixtimestamp (first oanda-min)) 
  (c/from-long (:unixtimestamp (first oanda-min)))
(t/hour
    (c/from-long (:unixtimestamp (first oanda-min)))
    )
(def oanda-min (ds/oanda-historical "EUR_USD" "5000" "M5"))
(let [dadata oanda-min]
       (->>
         dadata
         vec
         (reduce
           (fn [x y]
               (cond
                 (or (= 7 (:unixtimestamp y)) (= 8 (:unixtimestamp y)) (= 9 (:unixtimestamp y))) (update-in x [(- (count x) 1)] #(conj % y))
                 :else (conj x [])))
           [[]])
         (filter #(not (empty? %)))))
(let [dadata oanda-min]
       (->>
         dadata
         vec
         (reduce
           (fn [x y]
               (cond
                 (or (= 7 (-> (:unixtimestamp y) c/from-long t/hour))
                     (= 8 (-> (:unixtimestamp y) c/from-long t/hour))
                     (= 9 (-> (:unixtimestamp y) c/from-long t/hour))) (update-in x [(- (count x) 1)] #(conj % y))
                 :else (conj x [])))
           [[]])
         (filter #(not (empty? %)))))
(def mornins (let [dadata oanda-min]
                    (->>
                      dadata
                      vec
                      (reduce
                        (fn [x y]
                            (cond
                              (or (= 7 (-> (:unixtimestamp y) c/from-long t/hour))
                                  (= 8 (-> (:unixtimestamp y) c/from-long t/hour))
                                  (= 9 (-> (:unixtimestamp y) c/from-long t/hour))) (update-in x [(- (count x) 1)] #(conj % y))
                              :else (conj x [])))
                        [[]])
                      (filter #(not (empty? %))))))
  mornins
  (first mornins)
  (count mornins)
  (:account (smp/simple-strat-perc-candleratio (first mornins) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 1) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 2) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 3) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 4) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 5) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 6) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 7) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 8) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 9) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 10) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 11) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 12) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 13) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 14) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 15) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 16) 0))
(map 
   #(:account (smp/simple-strat-perc-candleratio % 0)) 
    mornins)
  (def oanda-min (ds/oanda-historical "EU50_EUR" "5000" "M5"))
  (def mornins (let [dadata oanda-min]
                    (->>
                      dadata
                      vec
                      (reduce
                        (fn [x y]
                            (cond
                              (or (= 7 (-> (:unixtimestamp y) c/from-long t/hour))
                                  (= 8 (-> (:unixtimestamp y) c/from-long t/hour))
                                  (= 9 (-> (:unixtimestamp y) c/from-long t/hour))) (update-in x [(- (count x) 1)] #(conj % y))
                              :else (conj x [])))
                        [[]])
                      (filter #(not (empty? %))))))
  (map
    #(:account (smp/simple-strat-perc-candleratio % 0))
    mornins)
oanda-min
  (:account (smp/simple-strat-perc-candleratio (nth mornins 16) 0))
(nth mornins 0)
  (:account (smp/simple-strat-perc-candleratio (nth mornins 0) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 1) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 2) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 3) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 4) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 5) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 6) 0))
  (:account (smp/simple-strat-perc-candleratio (nth mornins 7) 0))
  (def oanda-min (ds/oanda-historical "EUR_USD" "5000" "M5"))
(def mornins (let [dadata oanda-min]
                    (->>
                      dadata
                      vec
                      (reduce
                        (fn [x y]
                            (cond
                              (or (= 7 (-> (:unixtimestamp y) c/from-long t/hour))
                                  (= 8 (-> (:unixtimestamp y) c/from-long t/hour))
                                  ) (update-in x [(- (count x) 1)] #(conj % y))
                              :else (conj x [])))
                        [[]])
                      (filter #(not (empty? %))))))
  (map
    #(:account (smp/simple-strat-perc-candleratio % 0))
    mornins)
   (def oanda-min (ds/oanda-historical "EUR_USD" "5000" "M5"))
(def mornins (let [dadata oanda-min]
                    (->>
                      dadata
                      vec
                      (reduce
                        (fn [x y]
                            (cond
                              (or (= 12 (-> (:unixtimestamp y) c/from-long t/hour))
                                  (= 13 (-> (:unixtimestamp y) c/from-long t/hour))
                                  ) (update-in x [(- (count x) 1)] #(conj % y))
                              :else (conj x [])))
                        [[]])
                      (filter #(not (empty? %))))))
  (map
    #(:account (smp/simple-strat-perc-candleratio % 0))
    mornins)
  (def oanda-min (ds/oanda-historical "EUR_USD" "5000" "M5"))
  (def mornins (let [dadata oanda-min]
                    (->>
                      dadata
                      vec
                      (reduce
                        (fn [x y]
                            (cond
                              (or (= 16 (-> (:unixtimestamp y) c/from-long t/hour))
                                  ) (update-in x [(- (count x) 1)] #(conj % y))
                              :else (conj x [])))
                        [[]])
                      (filter #(not (empty? %))))))
  (map
    #(:account (smp/simple-strat-perc-candleratio % 0))
    mornins)
  (def oanda-min (ds/oanda-historical "EUR_USD" "5000" "M5"))
(def mornins (let [dadata oanda-min]
                    (->>
                      dadata
                      vec
                      (reduce
                        (fn [x y]
                            (cond
                              (or (= 7 (-> (:unixtimestamp y) c/from-long t/hour))
                                  (= 8 (-> (:unixtimestamp y) c/from-long t/hour))
                                  ) (update-in x [(- (count x) 1)] #(conj % y))
                              :else (conj x [])))
                        [[]])
                      (filter #(not (empty? %))))))
  (map
    #(:account (smp/simple-strat-perc-candleratio % 0))
    mornins)
(def mornins (let [dadata oanda-min]
                    (->>
                      dadata
                      vec
                      (reduce
                        (fn [x y]
                            (cond
                              (or (= 12 (-> (:unixtimestamp y) c/from-long t/hour))
                                  (= 13 (-> (:unixtimestamp y) c/from-long t/hour))
                                  ) (update-in x [(- (count x) 1)] #(conj % y))
                              :else (conj x [])))
                        [[]])
                      (filter #(not (empty? %))))))
  (map
    #(:account (smp/simple-strat-perc-candleratio % 0))
    mornins)
(def mornins (let [dadata oanda-min]
                    (->>
                      dadata
                      vec
                      (reduce
                        (fn [x y]
                            (cond
                              (or (= 7 (-> (:unixtimestamp y) c/from-long t/hour))
                                  (= 8 (-> (:unixtimestamp y) c/from-long t/hour))
                                  ) (update-in x [(- (count x) 1)] #(conj % y))
                              :else (conj x [])))
                        [[]])
                      (filter #(not (empty? %))))))
  (map
    #(:account (smp/simple-strat-perc-candleratio % 0))
    mornins)
(->>
    (map
      #(:account (smp/simple-strat-perc-candleratio % 0))
      mornins)
    (reduce +)
    )
(map
      #(:account (smp/simple-strat-perc-candleratio % 0))
      mornins)
(->>
    (map
      #(:account (smp/simple-strat-perc-candleratio % 0))
      mornins)
    (map #(- 1000 %))
    )
    (map #(- % 1000 ))
(->>
    (map
      #(:account (smp/simple-strat-perc-candleratio % 0))
      mornins)
    (map #(- % 1000))
    )
(->>
    (map
      #(:account (smp/simple-strat-perc-candleratio % 0))
      mornins)
    (map #(- % 1000))
    (reduce +)
    )
(->>
    (map
      #(:account (smp/simple-strat-perc-candleratio % 0))
      mornins)
    )
mornins
(->>
    (map
      #(:account (smp/simple-strat-perc-candleratio % 0))
      mornins)
    first
    )
    mornins
(->>
    mornins
    first
    )
(->>
    mornins
    first
    
    )
(->>
    mornins
    first
    :uniximtestamp
    c/from-long
    t/day
    )
(->>
    mornins
    first
    :uniximtestamp
    c/from-long
    pr/monday?
    )
(->>
    mornins
    first
    :uniximtestamp
    c/from-long
    c/day
    )
(->>
    mornins
    first
    :uniximtestamp
    c/from-long
    t/day
    )
(->>
    mornins
    first
    :uniximtestamp
    c/from-long
    t/day-of-week
    )
(map 
  #(->>
    %
    first
    :uniximtestamp
    c/from-long
    t/day-of-week
    )  
    
    mornins)
mornins
(map
  #(->>
    %
    first
    :uniximtestamp
    c/from-long
    t/day
    )
    mornins)
(map
  #(println
    %
    )
    mornins)
(map
    #(println
      (->>
        %
        first
        ))
    mornins)
(map
    #(println
      (->>
        %
        first
        :unixtimestamp
        ))
    mornins)
(map
    #(println
      (->>
        %
        first
        :unixtimestamp
        c/from-long
        ))
    mornins)
(map
    #(println
      (->>
        %
        first
        :unixtimestamp
        c/from-long
        t/day-of-week
        ))
    mornins)
(->>
    (map
      #(:account (smp/simple-strat-perc-candleratio % 0))
      mornins)
    (map #(- % 1000))
    (reduce +)
    )
  (map
    #(:account (smp/simple-strat-perc-candleratio % 0))
    mornins)
